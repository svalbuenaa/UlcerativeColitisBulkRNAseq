}
temp <- (temp/(length(dat_baja$coste))-1)**(1/2)
temp
temp <- 0
for (el in dat_baja$coste){
temp <- temp + (el-mean_baja)**2
}
temp <- (temp/(length(dat_baja$coste))-1)**(1/2)
temp
stdev_p_baja <- sd(dat_baja$coste)
stdev_p_baja
(length(dat_baja$coste))-1
temp
?qt
valor_crítico_baja <- qt(0.025, s_size_baja-1)
valor_crítico_baja
valor_crítico_baja <- qt(0.975, s_size_baja-1)
valor_crítico_baja
margen_baja <- valor_crítico_baja*stdev_p_baja/sqrt(s_size_baja)
margen_baja
lm(coste ~ 1, dat_baja)
model <- lm(coste ~ 1, dat_baja)
confint(model, level = 0.95)
mean_baja - 5762.464
?confint
print(paste0("El intervalo de confianza para la media del coste por ingreso con un nivel de confianza del 95% es: ", mean_baja-margen_baja, mean_baja+margen_baja))
print(paste0("El intervalo de confianza para la media del coste por ingreso con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), round(mean_baja+margen_baja, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", " round(mean_baja+margen_baja, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", ", round(mean_baja+margen_baja, 4)))
dat_baja <- dat %>% filter(nivel_urgencia=="Baja")
mean_baja <- mean(dat_baja$coste)
stdev_p_baja <- sd(dat_baja$coste)
s_size_baja <-  nrow(dat)
valor_crítico_baja <- qt(0.975, s_size_baja-1) # Calculo el valor crítico de 0.975 en lugar del valor crítico de 0.025 para que salga positivo y quede más clara la siguiente operación
margen_baja <- valor_crítico_baja*stdev_p_baja/sqrt(s_size_baja)
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia baja con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", ", round(mean_baja+margen_baja, 4)))
dat_alta <- dat %>% filter(nivel_urgencia=="Alta")
mean_alta <- mean(dat_alta$coste)
stdev_p_alta <- sd(dat_alta$coste)
s_size_alta <-  nrow(dat)
valor_crítico_alta <- qt(0.975, s_size_alta-1)
margen_alta <- valor_crítico_alta*stdev_p_alta/sqrt(s_size_alta)
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia alta con un nivel de confianza del 95% es: ", round(mean_alta-margen_alta, 4), ", ", round(mean_alta+margen_alta, 4)))
print(paste0("La media del coste por ingreso para un nivel de urgencia alta es: ", mean_alta))
dat_alta <- dat %>% filter(nivel_urgencia=="Alta")
mean_alta <- mean(dat_alta$coste)
stdev_p_alta <- sd(dat_alta$coste)
s_size_alta <-  nrow(dat)
valor_crítico_alta <- qt(0.975, s_size_alta-1)
margen_alta <- valor_crítico_alta*stdev_p_alta/sqrt(s_size_alta)
print(paste0("La media del coste por ingreso para un nivel de urgencia alta es: ", rount(mean_alta, 4)))
print(paste0("La media del coste por ingreso para un nivel de urgencia alta es: ", round(mean_alta, 4)))
dat_alta <- dat %>% filter(nivel_urgencia=="Alta")
mean_alta <- mean(dat_alta$coste)
stdev_p_alta <- sd(dat_alta$coste)
s_size_alta <-  nrow(dat)
valor_crítico_alta <- qt(0.975, s_size_alta-1)
margen_alta <- valor_crítico_alta*stdev_p_alta/sqrt(s_size_alta)
print(paste0("La media del coste por ingreso para un nivel de urgencia alta es: ", round(mean_alta, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia alta con un nivel de confianza del 95% es: ", round(mean_alta-margen_alta, 4), ", ", round(mean_alta+margen_alta, 4)))
dat_baja <- dat %>% filter(nivel_urgencia=="Baja")
mean_baja <- mean(dat_baja$coste)
stdev_p_baja <- sd(dat_baja$coste)
s_size_baja <-  nrow(dat)
valor_crítico_baja <- qt(0.975, s_size_baja-1) # Calculo el valor crítico de 0.975 en lugar del valor crítico de 0.025 para que salga positivo y quede más clara la siguiente operación
margen_baja <- valor_crítico_baja*stdev_p_baja/sqrt(s_size_baja)
print(paste0("La media del coste por ingreso para un nivel de urgencia baja es: ", round(mean_baja, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia baja con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", ", round(mean_baja+margen_baja, 4)))
valor_crítico_baja
margen_baja
margen_alta
mean_alta
mean_baja
valor_crítico_baja <- qt(0.975, s_size_baja-1) # Calculo el valor crítico de 0.975 en lugar del valor crítico de 0.025 para que salga positivo y quede más clara la siguiente operación
margen_baja <- valor_crítico_baja*stdev_p_baja/sqrt(s_size_baja)
print(paste0("La media del coste por ingreso para un nivel de urgencia baja es: ", round(mean_baja, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia baja con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", ", round(mean_baja+margen_baja, 4)))
```
t.test(dat$coste)
t.test(dat$coste %>% filter(nivel_urgencia=="Baja"))
t.test(dat_baja$coste)
mean_baja
?t.test
dat_baja <- dat %>% filter(nivel_urgencia=="Baja")
mean_baja <- mean(dat_baja$coste)
stdev_p_baja <- sd(dat_baja$coste)
s_size_baja <-  nrow(dat_baja)
valor_crítico_baja <- qt(0.975, s_size_baja-1) # Calculo el valor crítico de 0.975 en lugar del valor crítico de 0.025 para que salga positivo y quede más clara la siguiente operación
margen_baja <- valor_crítico_baja*stdev_p_baja/sqrt(s_size_baja)
print(paste0("La media del coste por ingreso para un nivel de urgencia baja es: ", round(mean_baja, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia baja con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", ", round(mean_baja+margen_baja, 4)))
t.test(dat_baja$coste)
dat_alta <- dat %>% filter(nivel_urgencia=="Alta")
mean_alta <- mean(dat_alta$coste)
stdev_p_alta <- sd(dat_alta$coste)
s_size_alta <-  nrow(dat_alta)
valor_crítico_alta <- qt(0.975, s_size_alta-1)
margen_alta <- valor_crítico_alta*stdev_p_alta/sqrt(s_size_alta)
print(paste0("La media del coste por ingreso para un nivel de urgencia alta es: ", round(mean_alta, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia alta con un nivel de confianza del 95% es: ", round(mean_alta-margen_alta, 4), ", ", round(mean_alta+margen_alta, 4)))
?prop.test
prop.test(nrow(dat%>%filter(edad<30)), nrow(dat), conf.level = 0.9, correct = FALSE)
prop <- nrow(dat %>% filter(edad<30)) / s_sample
s_sample <- nrow(dat)
prop <- nrow(dat %>% filter(edad<30)) / s_sample
prop
72/351
qnorm(0.05)
qnorm(0.95)
margen_error_prop <- valor_critico_prop*sqrt(prop*(1-prop)/s_sample)
valor_critico_prop <- qnorm(0.95) # Dado el número de muestras, asumimos que la distribución es asimilable a una normal
margen_error_prop <- valor_critico_prop*sqrt(prop*(1-prop)/s_sample)
print(paste0("El intervalo de confianza para la proporción de pacientes de menos de 30 años pcon un nivel de confianza del 90% es: ", round(prop-margen_error_prop, 4), ", ", round(prop+margen_error_prop, 4)))
prop
s_sample
sqrt(0.2051282*(1-0.2051282)/351)
margen_error_prop
valor_critico_prop*sqrt(0.2051282*(1-0.2051282)/351)
prop.test(nrow(dat%>%filter(edad<30)), nrow(dat), conf.level = 0.9, correct = T)
print(paste0("El intervalo de confianza para la proporción de pacientes de menos de 30 años pcon un nivel de confianza del 90% es: ", round(prop-margen_error_prop, 4), ", ", round(prop+margen_error_prop, 4)))
prop.test(nrow(dat%>%filter(edad<30)), nrow(dat), conf.level = 0.9, correct = FALSE)
valor_critico_prop
s_sample_requerida <- (valor_critico_prop^2)*prop*(1-prop)/(margen_error_prop_pedido)^2
margen_error_prop_pedido <- 0.01
s_sample_requerida <- (valor_critico_prop^2)*prop*(1-prop)/(margen_error_prop_pedido)^2
s_sample_requerida
?round
print(paste0("Para obtener un margen de error de 0.01 con un 90% de nivel de confianza y la proporción de pacientes menores de 30 años de la muestra trabajada, la muestra debe ser al menos de ", s_sample_requerida, " (esto es, ", ceiling(s_sample_requerida), ") pacientes"))
print(paste0("Para obtener un margen de error de 0.01 con un 90% de nivel de confianza y la proporción de pacientes menores de 30 años de la muestra trabajada, la muestra debe ser al menos de ", round(s_sample_requerida, 4=, " (esto es, ", ceiling(s_sample_requerida), ") pacientes"))
print(paste0("Para obtener un margen de error de 0.01 con un 90% de nivel de confianza y la proporción de pacientes menores de 30 años de la muestra trabajada, la muestra debe ser al menos de ", round(s_sample_requerida, 4), " (esto es, ", ceiling(s_sample_requerida), ") pacientes"))
t.test(dat_baja$coste, conf.level = 0.95)
t.test(dat_alta$coste)
margen_baja
margen_alta
s_sample <- nrow(dat)
prop <- nrow(dat %>% filter(edad<30)) / s_sample
valor_critico_prop <- qnorm(0.95) # Dado el número de muestras, asumimos que la distribución es asimilable a una normal
margen_error_prop <- valor_critico_prop*sqrt(prop*(1-prop)/s_sample)
print(paste0("El intervalo de confianza para la proporción de pacientes de menos de 30 años con un nivel de confianza del 90% es: ", round(prop-margen_error_prop, 4), ", ", round(prop+margen_error_prop, 4)))
prop
t.test(dat$coste, alternative = 5000)
_t.test
?t.test
t.test(dat$coste, y=5000)
t.test(dat$coste, mu=5000)
t.test(dat$coste, mu=5000, alternative = "greater")
t.test(dat$coste, mu=5000, alternative = "less")
t.test(dat$coste, mu=5000, alternative = "greater")
t.test(dat$coste, mu=5000, alternative = "between")
t.test(dat$coste, mu=5000, alternative = "two.sided")
punif(2.53, 1, 4, lower.tail = FALSE)
1.53/3
knitr::opts_chunk$set(echo = TRUE)
media_p2 <- mean(p2c)
p2c <- c(479, 466, 461, 465, 469, 463, 479, 455, 477, 463)
media_p2 <- mean(p2c)
media_p2
qnorm(0.025, lower.tail = FALSE)
round(qnorm(0.025, lower.tail = FALSE), 3)
err <- 22/sqrt(10)
media_p2-qnorm(0.025, lower.tail = FALSE)*err
round(media_p2-qnorm(0.025, lower.tail = FALSE)*err, 3)
round(media_p2+qnorm(0.025, lower.tail = FALSE)*err, 3)
?t.test
?confint
t.test(p2c, sigma = sigma, conf.level = 0.95)
t.test(p2c, sigma = sigma, conf.level = 0.95)
round(media_p2-qnorm(0.025, lower.tail = FALSE)*err, 3)
round(media_p2+qnorm(0.025, lower.tail = FALSE)*err, 3)
media_p2
round(media_p2-qnorm(0.025, lower.tail = FALSE)*err, 3)
round(media_p2+qnorm(0.025, lower.tail = FALSE)*err, 3)
round(media_p2-qnorm(0.025, lower.tail = FALSE)*err, 3)
sigma
t.test(p2c, sigma = 22, conf.level = 0.95)
t.test(p2c, conf.level = 0.95)
92-64
err_p3 <- sqrt((64/92)*(28/92)/92)
err_p3
p-qnorm(0.025, lower.tail = FALSE)*err_p3
p <- 64/92
u_p <- 1-p
err_p3 <- sqrt((64/92)*(28/92)/92)
err_p3
p-qnorm(0.025, lower.tail = FALSE)*err_p3
p+qnorm(0.025, lower.tail = FALSE)*err_p3
p <- 64/92
p
u_p <- 1-p
err_p3 <- sqrt((64/92)*(28/92)/92)
err_p3
p-qnorm(0.025, lower.tail = FALSE)*err_p3
p+qnorm(0.025, lower.tail = FALSE)*err_p3
p <- 64/92
p
u_p <- 1-p
err_p3 <- sqrt((64/92)*(28/92)/92)
err_p3
round(p-qnorm(0.025, lower.tail = FALSE)*err_p3, 3)
round(p+qnorm(0.025, lower.tail = FALSE)*err_p3, 3)
t.test(p)
prop.test(64, 92, conf.level = 0.95, correct = FALSE)
prop.test(64, 92, conf.level = 0.95, correct = FALSE)
p <- 64/92
p
u_p <- 1-p
err_p3 <- sqrt((64/92)*(28/92)/92)
err_p3
round(p-qnorm(0.025, lower.tail = FALSE)*err_p3, 3)
round(p+qnorm(0.025, lower.tail = FALSE)*err_p3, 3)
sqrt(3/12)
qnorm(2.5, (sqrt(9/12)/sqrt(900)), lower.tail = FALSE)
sqrt(9/12)/sqrt(900)
qnorm(2.53, 2.5, (sqrt(9/12)/sqrt(900)), lower.tail = FALSE)
temp <- sqrt(9/12)/sqrt(900)
temp
length(temp)
qnorm(2.53, 2.5, temp, lower.tail = FALSE)
qnorm(p = 2.53, mean = 2.5, sd =temp)
pnorm(2.53, 2.5, (sqrt(9/12)/sqrt(900)), lower.tail = FALSE)
pnorm(35, 35, 8/sqrt(200))
pnorm(35, 35, 8/sqrt(200))-pnorm(30, 35, 8/sqrt(200))
pnorm(30, 35, 8/sqrt(200))
e2b <- c(479, 466, 461, 465, 469, 463, 479, 455, 477, 463)
err_2b <- sd(e2b)/sqrt(length(e2b))
err_2b
22/sqrt(length(e2b))
err_2b <- 22/sqrt(length(e2b))
err_2b
qnorm(0.025, lower.tail = FALSE)
val <- qnorm(0.025, lower.tail = FALSE)
mean(e2b)-val*err_2b
mean(e2b)+val*err_2b
mean(e2b)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench))
prop.price <- 890000
equity <- prop.value*0.2
prop.price <- 890000
equity <- prop.price*0.2
avg.increase <- 0.02
tr1.perc <- 0.65
tr2.perc <- 0.15
rate.bench <- 0.015
years <- 10
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench))
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench*years))
prop.price <- 890000
equity <- prop.price*0.2
avg.increase <- 0.02
tr1.perc <- 0.65
tr2.perc <- 0.15
rate.bench <- 0.015
years <- 10
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench*years))
print(paste0("Interest payment Tr2 bench: ", tr2.perc*prop.price*rate.bench*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(rate.bench, 12*years)*years))
pmt <- function(rate, nper, pv, fv = 0, type = 0) {
payment <- (rate * (pv + fv / (1 + rate)^nper)) / (1 - (1 + rate)^(-nper))
# Adjust for payments at the beginning of the period if type = 1
if (type == 1) {
payment <- payment / (1 + rate)
}
return(payment)
}
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(rate.bench, 12*years)*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(rate.bench, 12*years, prop.price)*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(rate.bench, years, prop.price)*years))
pmt <- function(PV, r, n){
PV / ((1 - (1 + r)^-n) / r)
}
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(prop.price, rate.bench, years)*years))
pmt <- function(PV, r, n){
PV / ((1 - (1 + r)^-n) / r)
}
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(prop.price, rate.bench, years)*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(prop.price*tr2.perc, rate.bench, years)*years))
prop.price <- 890000
equity <- prop.price*0.2
avg.increase <- 0.02
tr1.perc <- 0.65
tr2.perc <- 0.15
rate.bench <- 0.015
years <- 10
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(rate.bench, years, prop.price)*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(prop.price*tr2.perc, rate.bench, years)*years))
prop.price <- 890000
equity <- prop.price*0.2
avg.increase <- 0.02
tr1.perc <- 0.65
tr2.perc <- 0.15
rate.bench <- 0.015
years <- 10
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", pmt(prop.price*tr2.perc, rate.bench, years)*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", round(pmt(prop.price*tr2.perc, rate.bench, years)*years,2)))
prop.price <- 890000
equity <- prop.price*0.2
avg.increase <- 0.02
tr1.perc <- 0.65
tr2.perc <- 0.15
rate.bench <- 0.015
years <- 10
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", round(pmt(prop.price*tr2.perc, rate.bench, years)*years,2)))
prop.price <- 890000
equity <- prop.price*0.2
avg.increase <- 0.02
tr1.perc <- 0.65
tr2.perc <- 0.15
rate.bench <- 0.015
years <- 10
print(paste0("Interest payment Tr1 bench: ", tr1.perc*prop.price*rate.bench*years))
print(paste0("Amoritisation + Interest payment Tr2 bench: ", round(pmt(prop.price*tr2.perc, rate.bench, years)*years,2)))
print(paste0("Total in ", years, " years: ", tr1.perc*prop.price*rate.bench*years+round(pmt(prop.price*tr2.perc, rate.bench, years)*years,2)))
dat_baja <- dat %>% filter(nivel_urgencia=="Baja")
library(tidyverse)
directorio <- file.path("C:", "Users", "svalb", "OneDrive", "Escritorio",
"Master data science", "Curso 2024-2025",
"1er semestre 2024-2025", "Probabilidad y estadística",
"PEC3", "Entrega R")
dat <- read.csv(file.path(directorio, "ingresos_hospital_clean.csv"), check.names = FALSE)
dat <- dat[,2:length(colnames(dat))]
colnames(dat) <- c("fecha_ingreso", "fecha_egreso", "edad", "género", "diagnóstico", "tipo_tratamiento", "coste", "pagado", "seguro", "nivel_urgencia")
dat_baja <- dat %>% filter(nivel_urgencia=="Baja")
mean_baja <- mean(dat_baja$coste)
stdev_p_baja <- sd(dat_baja$coste)
s_size_baja <-  nrow(dat_baja)
valor_crítico_baja <- qt(0.025, s_size_baja-1, lower.tail = FALSE)
margen_baja <- valor_crítico_baja*stdev_p_baja/sqrt(s_size_baja)
print(paste0("La media del coste por ingreso para un nivel de urgencia baja es: ", round(mean_baja, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia baja con un nivel de confianza del 95% es: ", round(mean_baja-margen_baja, 4), ", ", round(mean_baja+margen_baja, 4)))
dat_alta <- dat %>% filter(nivel_urgencia=="Alta")
mean_alta <- mean(dat_alta$coste)
stdev_p_alta <- sd(dat_alta$coste)
s_size_alta <-  nrow(dat_alta)
valor_crítico_alta <- qt(0.025, s_size_alta-1, lower.tail = FALSE)
margen_alta <- valor_crítico_alta*stdev_p_alta/sqrt(s_size_alta)
print(paste0("La media del coste por ingreso para un nivel de urgencia alta es: ", round(mean_alta, 4)))
print(paste0("El intervalo de confianza para la media del coste por ingreso para un nivel de urgencia alta con un nivel de confianza del 95% es: ", round(mean_alta-margen_alta, 4), ", ", round(mean_alta+margen_alta, 4)))
s_sample <- nrow(dat)
prop <- nrow(dat %>% filter(edad<30)) / s_sample
valor_critico_prop <- qnorm(0.05, lower.tail = FALSE) # Dado el número de muestras, asumimos que la distribución es asimilable a una normal
margen_error_prop <- valor_critico_prop*sqrt(prop*(1-prop)/s_sample)
print(paste0("El intervalo de confianza para la proporción de pacientes de menos de 30 años con un nivel de confianza del 90% es: ", round(prop-margen_error_prop, 4), ", ", round(prop+margen_error_prop, 4)))
prop.test(nrow(dat%>%filter(edad<30)), 4412, conf.level = 0.9, correct = FALSE)
0.01976608-0.01346503
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(comment = NA)
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("stringr")) install.packages("stringr")
if (!require("ggrepel")) install.packages("ggrepel")
if (!require("dplyr")) install.packages("dplyr")
if (!require("patchwork")) install.packages("patchwork")
if (!require("BiocManager")) install.packages("BiocManager")
if (!require("ggbreak")) install.packages("ggbreak")
if (!require("ggvenn")) install.packages("ggvenn")
if (!require("clusterProfiler")) BiocManager::install("clusterProfiler")
if (!require("AnnotationDbi")) BiocManager::install("AnnotationDbi")
if (!require("org.Hs.eg.db")) BiocManager::install("org.Hs.eg.db")
if (!require("org.Hs.eg.db")) BiocManager::install("DESeq2")
if (!require("ComplexHeatmap")) BiocManager::install("ComplexHeatmap")
library(ggplot2)
library(stringr)
library(ggrepel)
library(dplyr)
library(patchwork)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(DESeq2)
library(plotly)
library(ggbreak)
library(ComplexHeatmap)
library(circlize)
CoV_mean <- function(arg_exp){
# Calculates Coefficient of variation and mean expression per gene for a given gene expression dataframe
mean_values_ <- rowMeans(arg_exp) # Calculate mean
CoV_values_ <- apply(arg_exp, 1, function(row) sd(row) / mean(row)) # Calculate coefficient of variation
stats_Experiment <- cbind(mean_values_, CoV_values_) # Put together for return
colnames(stats_Experiment) <- c("Mean_expression",
"CoV")
return(as.data.frame(stats_Experiment))
}
plot_CoV_mean <- function(arg_dataframe, arg_x, arg_y,
arg_lab_title = "title", arg_lab_x = "x", arg_lab_y = "y",
arg_color = "blue"){
# Plots the mean expression vs the coefficient of variation (calculated elsewhere, e.g. with the function above) for a gene expression dataset
ggplot(arg_dataframe, aes_string(x = arg_x, y = arg_y, label=c("Gene"))) +
geom_point(color = arg_color, alpha = 0.4) +
labs(x = arg_lab_x, y = arg_lab_y, title = arg_lab_title)+
theme_light()+
theme(plot.title = element_text(size = 12, hjust=0.5))+
xlim(2.5, 15)+
ylim(-0.01, 0.5)
}
# Set a file path
project_dir <- file.path("Z:", "My Drive", "Bioinformatics project bulk-RNAseq")
# Import dataset with gene counts
genes_list <- read.delim(file.path(project_dir, "GSE107593_raw_reads_BCHRNAseq.txt"), check.names=F)
genes_list
colnames(genes_list) <- c("ENSG_symbol", colnames(genes_list[2:length(colnames(genes_list))]))
genes_list[,c(1,3,10:ncol(genes_list))]
genes_list
genes_list[,c(1,3,10:ncol(genes_list))]
# Read GSE107593_series_matrix.txt
metadata_matrix <- read.delim(file.path(project_dir, "Dataset copy, untouched", "GSE107593_series_matrix.txt"), check.names=F, skip = 25)
metadata_matrix_2 <- data.frame(t(metadata_matrix[,2:ncol(metadata_matrix)]))
colnames(metadata_matrix_2) <- metadata_matrix[,1]
# Obtain patient ids
patient_ids <- unique(str_replace(metadata_matrix_2[,12], "subject: ",""))
for (el in patient_ids){
cat(paste0(el,"\n"))
}
# Obtain sampling locations
location <- unique(str_replace(metadata_matrix_2[,11], "location: ",""))
for (el in sort(location)){
cat(paste0(el,"\n"))
}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(comment = NA)
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("stringr")) install.packages("stringr")
if (!require("ggrepel")) install.packages("ggrepel")
if (!require("dplyr")) install.packages("dplyr")
if (!require("patchwork")) install.packages("patchwork")
if (!require("BiocManager")) install.packages("BiocManager")
if (!require("ggbreak")) install.packages("ggbreak")
if (!require("ggvenn")) install.packages("ggvenn")
if (!require("clusterProfiler")) BiocManager::install("clusterProfiler")
if (!require("AnnotationDbi")) BiocManager::install("AnnotationDbi")
if (!require("org.Hs.eg.db")) BiocManager::install("org.Hs.eg.db")
if (!require("org.Hs.eg.db")) BiocManager::install("DESeq2")
if (!require("ComplexHeatmap")) BiocManager::install("ComplexHeatmap")
library(ggplot2)
library(stringr)
library(ggrepel)
library(dplyr)
library(patchwork)
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(DESeq2)
library(plotly)
library(ggbreak)
library(ComplexHeatmap)
library(circlize)
CoV_mean <- function(arg_exp){
# Calculates Coefficient of variation and mean expression per gene for a given gene expression dataframe
mean_values_ <- rowMeans(arg_exp) # Calculate mean
CoV_values_ <- apply(arg_exp, 1, function(row) sd(row) / mean(row)) # Calculate coefficient of variation
stats_Experiment <- cbind(mean_values_, CoV_values_) # Put together for return
colnames(stats_Experiment) <- c("Mean_expression",
"CoV")
return(as.data.frame(stats_Experiment))
}
plot_CoV_mean <- function(arg_dataframe, arg_x, arg_y,
arg_lab_title = "title", arg_lab_x = "x", arg_lab_y = "y",
arg_color = "blue"){
# Plots the mean expression vs the coefficient of variation (calculated elsewhere, e.g. with the function above) for a gene expression dataset
ggplot(arg_dataframe, aes_string(x = arg_x, y = arg_y, label=c("Gene"))) +
geom_point(color = arg_color, alpha = 0.4) +
labs(x = arg_lab_x, y = arg_lab_y, title = arg_lab_title)+
theme_light()+
theme(plot.title = element_text(size = 12, hjust=0.5))+
xlim(2.5, 15)+
ylim(-0.01, 0.5)
}
# Set a file path
project_dir <- file.path("Z:", "My Drive", "Bioinformatics project bulk-RNAseq")
# Import dataset with gene counts
genes_list <- read.delim(file.path(project_dir, "GSE107593_raw_reads_BCHRNAseq.txt"), check.names=F)
genes_list
colnames(genes_list) <- c("ENSG_symbol", colnames(genes_list[2:length(colnames(genes_list))]))
genes_list[,c(1,3,10:ncol(genes_list))]
# Read GSE107593_series_matrix.txt
metadata_matrix <- read.delim(file.path(project_dir, "Dataset copy, untouched", "GSE107593_series_matrix.txt"), check.names=F, skip = 25)
metadata_matrix_2 <- data.frame(t(metadata_matrix[,2:ncol(metadata_matrix)]))
colnames(metadata_matrix_2) <- metadata_matrix[,1]
# Obtain patient ids
patient_ids <- unique(str_replace(metadata_matrix_2[,12], "subject: ",""))
for (el in patient_ids){
cat(paste0(el,"\n"))
}
# Obtain sampling locations
location <- unique(str_replace(metadata_matrix_2[,11], "location: ",""))
for (el in sort(location)){
cat(paste0(el,"\n"))
}
# Create df for normalization:
genes_list_lognorm <- data.frame(matrix(NA, nrow = nrow(genes_list), ncol = ncol(genes_list)))
# Columns before counts
for (col in 1:9){
genes_list_lognorm[[col]] <- genes_list[[col]]
}
# Column names
colnames(genes_list_lognorm) <- colnames(genes_list)
for (i in 10:ncol(genes_list)) {
genes_list_lognorm[, i] <- log2((genes_list[, i] / colSums(genes_list[i]) * 1000000)+8)
}
genes_list_lognorm[,c(1,3,10:ncol(genes_list))]
df_mean_vs_CoV <- genes_list_lognorm[,10:ncol(genes_list)]
stats_ <- CoV_mean(df_mean_vs_CoV)
stats_$ENSG <- genes_list_lognorm[[1]]
stats_$Gene <- genes_list_lognorm[[3]]
p1 <- plot_CoV_mean(stats_, arg_x = "Mean_expression", arg_y = "CoV", arg_lab_title = "Mean vs CoV, all samples", arg_lab_x = "Mean expression across samples", arg_lab_y = "Coefficient of Variation")
p1
genes_list
View(metadata_matrix_2)
